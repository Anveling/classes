#!/usr/bin/env python

"""
Synchronizes the student repositories with the template repository
"""


import pandas as pd

import argparse
import multiprocessing
import os
import os.path
import subprocess
import sys


REPO_URL_PREFIX = 'git@gitlab.com:cloudmesh_fall2016'


def getopts():

    p = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                description=__doc__,
    )

    p.add_argument('-c', '--csv', help="CSV file exported from the 'IDS' sheet of the 'gradebook' on Google Drive")
    p.add_argument('-t', '--template', help='Path to template repository')
    p.add_argument('-u', '--url-prefix', default=REPO_URL_PREFIX, help='Repo url prefix')
    p.add_argument('-p', '--projects', default='repos/student', help='Directory in which the student repositories are managed')

    return p.parse_args()




class Worker(object):

    def __init__(self, template_repo, prefix):
        self.template_repo = os.path.abspath(template_repo)
        self.prefix = os.path.abspath(prefix)

        if not os.path.exists(prefix):
            os.makedirs(prefix)


    def __call__(self, repo):
        print 'Working on', repo
        name = os.path.basename(repo)
        os.chdir(self.prefix)

        if not os.path.exists(name):
            clone = ['git', 'clone', repo, name]
            subprocess.check_output(clone)

        os.chdir(name)

        self.pull_origin()
        self.pull_template()
        self.push_origin()


    def update_remote(self):
        subprocess.check_output(['git', 'remote', 'update'])


    def has_remote_history(self, branch='master'):
        result = subprocess.check_output(['git', 'ls-remote', '--heads', 'origin'])
        return 'refs/heads/{}'.format(branch) in result


    def pull_origin(self):
        self.update_remote()
        if self.has_remote_history():
            subprocess.check_output(['git', 'pull', 'origin', 'master'])


    def pull_template(self):
        subprocess.check_call(['git', 'pull', self.template_repo])


    def push_origin(self):
        subprocess.check_output(['git', 'push', 'origin', 'master'])


if __name__ == '__main__':

    opts = getopts()

    if not os.path.exists(opts.projects):
        os.makedirs(opts.projects)

    if not os.path.isdir(opts.projects):
        sys.stderr.write('ERROR: {} exists but is not a directory\n'.format(opts.projects))
        sys.exit(1)


    df = pd.read_csv(opts.csv, header=0).dropna()
    repo_names = df['Class ID']
    repos = [os.path.join(opts.url_prefix, name) for name in repo_names]
    pool = multiprocessing.Pool()

    # sanity check
    for name in repo_names:
        local = os.path.join(opts.projects, name)

        if os.path.exists(local):
            if not os.path.isdir(local):
                sys.stderr.write('ERROR: {} exists but is not a directory\n'.format(local))
                sys.exit(2)

            dot_git = os.path.join(local, '.git')
            if not os.path.exists(dot_git) or not os.path.isdir(dot_git):
                sys.stderr.write('ERROR: {} is not a git repository\n'.format(local))
                sys.exit(3)


    # sync
    worker = Worker(opts.template, opts.projects)
    pool.map(worker, repos)
